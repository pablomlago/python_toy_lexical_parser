#ifndef __LEX_LIB
#define __LEX_LIB

#include "stateMachine.h"
#include "abb.h"
#include "input_system.h"

//We define the lexical parser as an abstract data type
//Its implementation is hidden for the user who only knows about the functionality it exports
typedef struct StructLexicalParser *LexicalParser;

//These will be the elements generated by the lexical parser when performing the lexical analysis
typedef struct {
    char* lexeme;
    int lexicalComponent;
} LexicalElement;

/**
 * Initializes the a lexical element, allocating a given size for the lexeme
 */
void initializeLexicalElement(LexicalElement* lexicalElement, size_t lexemeSize);
/*
 * Removes a lexical element, deallocating the memory associated with it
 */
void removeLexicalElement(LexicalElement* lexicalElement);
/*
 * Initializes the lexical parser, saving the reference to the symbol table and providing the file to be compiled
 */
void initializeLexicalParser(LexicalParser* lexicalParser, abb* symbolTable, char* fileName);
/*
 * Removes the lexical parser, deallocating the memory associated to the input buffer and the state state machine
 * The symbol table is not removed, as this element is shared between different components of our compiler
 */
void removeLexicalParser(LexicalParser* lexicalParser);
/*
 * Return the next lexical element in the code file being compiled
 */
LexicalElement* returnNextLexicalComponent(LexicalParser lexicalParser);

#endif	/* __LEX_LIB */
